/*!
 * zoomist.js v1.0.0
 * https://github.com/cotton123236/zoomist#readme
 *
 * Copyright 2021-present Wilson Wu
 * Released under the MIT license
 *
 * Date: 2021-11-02T14:21:20.260Z
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Zoomist=e()}(this,(function(){"use strict";var t={fill:"cover",src:"data-zoomist-src",wheel:!0};const e="zoomist";var i={getContainerData(){return this.data.container},getImageData(){return this.data.image}};const o=t=>t instanceof HTMLElement?t:document.querySelector(t),n=(t,e)=>{for(const[o,n]of Object.entries(e))t.style[o]="number"!=typeof(i=n)||isNaN(i)?n:`${n}px`;var i};class r{constructor(e,i={}){if(!e)throw new Error("The first argument is required.");if(null===o(e))throw new Error("This element is not exist.");this.element=o(e),this.options=Object.assign({},t,(t=>{if(!(t=>"object"==typeof t&&null!==t)(t))return!1;try{const{constructor:e}=t,{prototype:i}=e,{hasOwnProperty:o}=Object.prototype;return e&&i&&o.call(i,"isPrototypeOf")}catch(t){return!1}})(i)&&i),this.init()}init(){const{element:i,options:o}=this;if(i[e])return;i[e]=this;const n=o.src="string"==typeof(r=o.src)&&""!==r?o.src:t.src;var r;const s=i.getAttribute(n);this.create(s)}create(t){if(!t)return;const{element:e}=this,{offsetWidth:i,offsetHeight:o}=e;this.url=t,this.data={},this.data.container={width:i,height:o,ratio:i/o},this.mount()}mount(){if(this.mounted)return;const{url:t,data:e,options:i}=this,{container:o}=e,{fill:r}=i,s=document.createElement("img");s.classList.add("zoomist-image"),s.src=t;const{naturalWidth:h,naturalHeight:a}=s,c=h/a;let l;"cover"!==r&&"contain"!==r&&"none"!==r&&(i.fill="cover"),"cover"===i.fill&&(l=e.container.ratio===c?"both":e.container.ratio>c?"width":"height"),"contain"===i.fill&&(l=e.container.ratio===c?"both":e.container.ratio>c?"height":"width"),console.log(i.fill,l);const f="none"===i.fill?h:"both"===l||"width"===l?o.width:o.height*c,d="none"===i.fill?a:"both"===l||"height"===l?o.height:o.width/c,u=(o.width-f)/2,g=(o.height-d)/2;this.data.image={naturalWidth:h,naturalHeight:a,width:f,height:d,ratio:c,left:u,top:g},n(s,{width:f,height:d,left:u,top:g}),this.image=s,(t=>{const{element:e,data:i}=t,{container:o,image:r}=i;window.addEventListener("resize",(function(){const i=e.offsetWidth/o.width,s=e.offsetHeight/o.height,h=r.width*i,a=r.height*s,c=r.left*i,l=r.top*s;o.width=e.offsetWidth,o.height=e.offsetHeight,r.width=h,r.height=a,r.left=c,r.top=l,n(t.image,{width:h,height:a,left:c,top:l})}))})(this),this.mounted=!0,this.render()}render(){const{element:t,image:e}=this;t.classList.add("zoomist-container"),t.append(e)}}return Object.assign(r.prototype,i),r}));
